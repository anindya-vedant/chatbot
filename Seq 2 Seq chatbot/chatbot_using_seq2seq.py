# -*- coding: utf-8 -*-
"""ChatBot_using_seq2seq.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FKhOYhOz8d6BKLVVwL1YMlmoFQ2ML1DS

# Chatbot using Seq2Seq LSTM models
In this notebook, we will assemble a seq2seq LSTM model using Keras Functional API to create a working **Chatbot **which would answer questions asked to it.

Chatbots have become applications themselves. You can choose the field or stream and gather data regarding various questions. We can build a chatbot for an e-commerce webiste or a school website where parents could get information about the school.

<center>![alt text](https://i1.wp.com/www.automateyourcrib.com/wp-content/uploads/2018/01/nexus2cee_assistant_thumb_thumb.gif?ssl=1)</center>

Messaging platforms like Allo have implemented chatbot services to engage users. The famous [Google Assistant](https://assistant.google.com/), [Siri](https://www.apple.com/in/siri/), [Cortana](https://www.microsoft.com/en-in/windows/cortana) and [Alexa](https://www.alexa.com/) may have been build using simialr models.

So, let's start building our Chatbot.

## 1) Importing the packages

We will import [TensorFlow](https://www.tensorflow.org) and our beloved [Keras](https://www.tensorflow.org/guide/keras). Also, we import other modules which help in defining model layers.
"""

import numpy as np
import tensorflow as tf
import pickle
from tensorflow.keras import layers , activations , models , preprocessing

print( tf.VERSION )

"""## 2) Download the preprocessed data

The dataset hails from [chatterbot/english on Kaggle](https://www.kaggle.com/kausr25/chatterbotenglish).com by [kausr25](https://www.kaggle.com/kausr25). It contains pairs of questions and answers based on a number of subjects like food, history, AI etc.

The preprocessed data could be found from this repo -> https://github.com/shubham0204/Dataset_Archives

I know that we should include how the raw data is processed. But, for simplicity, we keep that aside and focus on the interesting parts. We download the zip file and extract it.
"""

import requests, zipfile, io

r = requests.get( 'https://github.com/shubham0204/Dataset_Archives/blob/master/chatbot_nlp_processed.zip?raw=true' ) 
z = zipfile.ZipFile(io.BytesIO(r.content))
z.extractall()

"""## 3) Reading the data

The zip file which was extracted contains 5 files. They are :

1.   `enc_in_data.npy `: The questions in tokenized and padded form. Shape is `( 567 , 22 )`
2.   `dec_in_data.npy` : The answers in tokenized and padded form. Also, they have the `<START>` and `<END>` tags. Shape is `( 567 , 74 ) `
3.  `dec_tar_data.npy` : Same as `dec_in_data.npy` but has one-hot encoded answers. Also, the `<END>` tag has been removed. Shape is `( 567 , 74 , 1894 )`
4.  `embedding.npy` : The GloVe embedding matrix for the vocabulary. You can see the [GloVe : Global Vectors for Word Representation](https://nlp.stanford.edu/projects/glove/).
5.  `tokenizer.pkl` : The pickled form of `tf.keras.preprocessing.text.Tokenizer() `through which the questions and the answers were tokenized. Both, questions and the answers share the same vocabulary.

Also, the max lengths of the questions and answers is printed along the data shape.
"""

encoder_input_data = np.load( 'chatbot_nlp_processed/data/enc_in_data.npy' )
decoder_input_data = np.load( 'chatbot_nlp_processed/data/dec_in_data.npy' )
decoder_target_data = np.load( 'chatbot_nlp_processed/data/dec_tar_data.npy' )

embedding_matrix = np.load('chatbot_nlp_processed/data/embedding.npy' ) 

tokenizer = pickle.load( open('chatbot_nlp_processed/data/tokenizer.pkl' , 'rb'))

num_tokens = len( tokenizer.word_index )+1
word_dict = tokenizer.word_index

max_question_len = encoder_input_data.shape[1]
max_answer_len = decoder_input_data.shape[1]

print( 'Max length of question is {}'.format( max_question_len) )
print( 'Max length of answer is {}'.format( max_answer_len) )

print( encoder_input_data.shape )
print( decoder_input_data.shape )
print( decoder_target_data.shape )

"""## 3) Defining the Encoder-Decoder model
The model will have Embedding, LSTM and Dense layers. The basic configuration is as follows.


*   2 Input Layers : One for `encoder_input_data` and another for `decoder_input_data`.
*   Embedding layer : For converting token vectors to fix sized dense vectors. **( Note :  Don't forget the `mask_zero=True` argument here )**
*   LSTM layer : Provide access to Long-Short Term cells.

Working : 

1.   The `encoder_input_data` comes in the Embedding layer (  `encoder_embedding` ). 
2.   The output of the Embedding layer goes to the LSTM cell which produces 2 state vectors ( `h` and `c` which are `encoder_states` )
3.   These states are set in the LSTM cell of the decoder.
4.   The decoder_input_data comes in through the Embedding layer.
5.   The Embeddings goes in LSTM cell ( which had the states ) to produce seqeunces.

**Important points :**


*   `200` is the output of the GloVe embeddings.
*   `embedding_matrix` is the GloVe embedding which we downloaded earlier.


<center><img style="float: center;" src="https://cdn-images-1.medium.com/max/1600/1*bnRvZDDapHF8Gk8soACtCQ.gif"></center>


Image credits to [Hackernoon](https://hackernoon.com/tutorial-3-what-is-seq2seq-for-text-summarization-and-why-68ebaa644db0).
"""

encoder_inputs = tf.keras.layers.Input(shape=( None , ))
encoder_embedding = tf.keras.layers.Embedding( num_tokens, 200 , mask_zero=True , weights=[embedding_matrix] ) (encoder_inputs)
encoder_outputs , state_h , state_c = tf.keras.layers.LSTM( 200 , return_state=True )( encoder_embedding )
encoder_states = [ state_h , state_c ]

decoder_inputs = tf.keras.layers.Input(shape=( None ,  ))
decoder_embedding = tf.keras.layers.Embedding( num_tokens, 200 , mask_zero=True, weights=[embedding_matrix]) (decoder_inputs)
decoder_lstm = tf.keras.layers.LSTM( 200 , return_state=True , return_sequences=True )
decoder_outputs , _ , _ = decoder_lstm ( decoder_embedding , initial_state=encoder_states )
decoder_dense = tf.keras.layers.Dense( num_tokens , activation=tf.keras.activations.softmax ) 
output = decoder_dense ( decoder_outputs )

model = tf.keras.models.Model([encoder_inputs, decoder_inputs], output )
model.compile(optimizer=tf.keras.optimizers.RMSprop(), loss='categorical_crossentropy')

model.summary()

"""## 4) Training the model
We train the model for a number of epochs with RMSprop optimizer and categorical crossentropy loss function.
"""

model.fit([encoder_input_data , decoder_input_data], decoder_target_data, batch_size=50, epochs=50 ) 
tf.keras.models.save_model( model,'./model.h5')

"""## 5) Defining inference models
We create inference models which help in predicting answers.

**Encoder inference model** : Takes the question as input and outputs LSTM states ( `h` and `c` ).

**Decoder inference model** : Takes in 2 inputs, one are the LSTM states ( Output of encoder model ), second are the answer input seqeunces ( ones not having the `<start>` tag ). It will output the answers for the question which we fed to the encoder model and its state values.
"""

def make_inference_models():
    
    encoder_model = tf.keras.models.Model(encoder_inputs, encoder_states)
    
    decoder_state_input_h = tf.keras.layers.Input(shape=( 200 ,))
    decoder_state_input_c = tf.keras.layers.Input(shape=( 200 ,))
    
    decoder_states_inputs = [decoder_state_input_h, decoder_state_input_c]
    
    decoder_outputs, state_h, state_c = decoder_lstm(
        decoder_embedding , initial_state=decoder_states_inputs)
    decoder_states = [state_h, state_c]
    decoder_outputs = decoder_dense(decoder_outputs)
    decoder_model = tf.keras.models.Model(
        [decoder_inputs] + decoder_states_inputs,
        [decoder_outputs] + decoder_states)
    
    return encoder_model , decoder_model

"""## 6) Talking with our Chatbot

First, we define a method `str_to_tokens` which converts `str` questions to Integer tokens with padding.
"""

def str_to_tokens( sentence : str ):
    words = sentence.lower().split()
    tokens_list = list()
    for word in words:
        tokens_list.append( word_dict[ word ] ) 
    return preprocessing.sequence.pad_sequences( [tokens_list] , maxlen=max_question_len , padding='post')

"""1.   First, we take a question as input and predict the state values using `enc_model`.
2.   We set the state values in the decoder's LSTM.
3.   Then, we generate a sequence which contains the `<start>` element.
4.   We input this sequence in the `dec_model`.
5.   We replace the `<start>` element with the element which was predicted by the `dec_model` and update the state values.
6.   We carry out the above steps iteratively till we hit the `<end>` tag or the maximum answer length.
"""

enc_model , dec_model = make_inference_models()

def response(input_sentence):
    states_values = enc_model.predict( str_to_tokens( input_sentence ) )
    empty_target_seq = np.zeros( ( 1 , 1 ) )
    empty_target_seq[0, 0] = word_dict['start']
    stop_condition = False
    decoded_translation = ''
    while not stop_condition :
        dec_outputs , h , c = dec_model.predict([ empty_target_seq ] + states_values )
        sampled_word_index = np.argmax( dec_outputs[0, -1, :] )
        sampled_word = None
        for word , index in word_dict.items() :
            if sampled_word_index == index :
                decoded_translation += ' {}'.format( word )
                sampled_word = word
        
        if sampled_word == 'end' or len(decoded_translation.split()) > max_answer_len:
            stop_condition = True
            
        empty_target_seq = np.zeros( ( 1 , 1 ) )  
        empty_target_seq[ 0 , 0 ] = sampled_word_index
        states_values = [ h , c ] 

    return decoded_translation

while(True):
    user_msg=input('->')
    reply=response(user_msg)
    print(reply)

##for _ in range(10):
##    states_values = enc_model.predict( str_to_tokens( input( 'Enter question : ' ) ) )
##    empty_target_seq = np.zeros( ( 1 , 1 ) )
##    empty_target_seq[0, 0] = word_dict['start']
##    stop_condition = False
##    decoded_translation = ''
##    while not stop_condition :
##        dec_outputs , h , c = dec_model.predict([ empty_target_seq ] + states_values )
##        sampled_word_index = np.argmax( dec_outputs[0, -1, :] )
##        sampled_word = None
##        for word , index in word_dict.items() :
##            if sampled_word_index == index :
##                decoded_translation += ' {}'.format( word )
##                sampled_word = word
##        
##        if sampled_word == 'end' or len(decoded_translation.split()) > max_answer_len:
##            stop_condition = True
##            
##        empty_target_seq = np.zeros( ( 1 , 1 ) )  
##        empty_target_seq[ 0 , 0 ] = sampled_word_index
##        states_values = [ h , c ] 
##
##    print( decoded_translation )
